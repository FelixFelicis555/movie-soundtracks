SELECT ?movie (COALESCE(?az, 0) as ?AnzahlSongs) (COALESCE(?ts, 0) as ?TaggedSongs) (COALESCE(?rs, 0) as ?RockSongs) (COALESCE(?lv, 0) as ?LoveSongs)
FROM <http://imn.htwk-leipzig.de/pbachman/ontologies/imdb#>
FROM <http://imn.htwk-leipzig.de/pbachman/ontologies/lastfm#>
FROM <http://imn.htwk-leipzig.de/pbachman/ontologies/tunefind#>
FROM <http://imn.htwk-leipzig.de/pbachman/ontologies/references#>
WHERE
{  
    {
        ?imdbmovie a dbpedia-owl:Film ;
                   dbpprop:title ?movie ;
                   dbpedia-owl:director imdb:Michael_Bay ;
                   owl:sameAs ?tunefindFilm .
    }

    OPTIONAL
    {
        SELECT (COUNT(DISTINCT ?song) as ?as) ?tunefindFilm
        WHERE
        {
            ?tunefindFilm tunefind:contains ?song .
        }
        GROUP BY ?tunefindFilm
    }

    OPTIONAL
    {
        SELECT (COUNT(DISTINCT ?song) as ?rs) ?tunefindFilm
        WHERE
        {
            ?tunefindFilm tunefind:contains ?song .
            ?song rdfs:label ?s ;
                  owl:sameAs ?lastFmSong .

            ?lastFmSong lastfm:tagged ?tag .

            FILTER (CONTAINS(lcase(?tag), "rock"))
        }
        GROUP BY ?tunefindFilm
    }

    OPTIONAL
    {
        SELECT (COUNT(DISTINCT ?song) as ?lv) ?tunefindFilm
        WHERE
        {
            ?tunefindFilm tunefind:contains ?song .
            ?song rdfs:label ?s ;
                  owl:sameAs ?lastFmSong .

            ?lastFmSong lastfm:tagged ?tag .

            FILTER (CONTAINS(lcase(?tag), "love"))
        }
        GROUP BY ?tunefindFilm
    }

    OPTIONAL
    {
        SELECT (COUNT(DISTINCT ?song) as ?ts) ?tunefindFilm
        WHERE
        {
            ?tunefindFilm tunefind:contains ?song .
            ?song rdfs:label ?s ;
                  owl:sameAs ?lastFmSong .

            ?lastFmSong lastfm:tagged ?tag .

        }
        GROUP BY ?tunefindFilm
    }
}